var search_data = {"index":{"searchIndex":["highline","colorscheme","highline","highline","string","menu","question","noautocompletematch","questionerror","samplecolorscheme","simulate","stringextensions","style","systemextensions","winapi","dl","io","kernel","object","string","stringio","getconsolescreenbufferinfo()","getstdhandle()","string()","style()","[]()","[]=()","_getch()","actual_length()","agree()","ansi_rgb_to_hex()","answer_or_default()","append_default()","ask()","blue()","bright()","build_responses()","change_case()","choice()","choices()","choose()","code()","code_index()","color()","color()","color()","color()","color_code()","color_code()","color_scheme()","color_scheme=()","colorize_strings()","const_missing()","continue_paging?()","convert()","create_bright_variant()","definition()","dup()","eof?()","expected_range()","explain_error()","find_style()","first_answer()","first_answer?()","format_statement()","gather()","get_character()","get_line()","get_response()","getbyte()","gets()","green()","help()","hidden()","in_range?()","include?()","included()","indent()","indentation()","index()","index=()","init_help()","initialize_system_extensions()","keys()","layout=()","light()","list()","list()","load_from_hash()","method_missing()","new()","new()","new()","new()","new()","new()","new()","newline()","on()","on()","on_rgb()","options()","or_ask()","output_cols()","output_rows()","page_at=()","page_print()","raw_no_echo_mode()","red()","remove_whitespace()","restore_mode()","rgb()","rgb()","rgb_hex()","rgb_number()","rgb_parts()","say()","select()","selection()","supports_rgb_color?()","terminal_size()","to_ary()","to_constant()","to_hash()","to_hash()","to_s()","to_s()","to_symbol()","track_eof=()","track_eof?()","uncolor()","uncolor()","uncolor()","uncolor()","unique_answers()","update_responses()","use_color=()","use_color?()","using_color_scheme?()","valid_answer?()","variant()","with()","wrap()","wrap_at=()","changelog","install","license","readme","todo"],"longSearchIndex":["highline","highline::colorscheme","highline::highline","highline::highline::highline","highline::highline::highline::string","highline::menu","highline::question","highline::question::noautocompletematch","highline::questionerror","highline::samplecolorscheme","highline::simulate","highline::stringextensions","highline::style","highline::systemextensions","highline::systemextensions::winapi","highline::systemextensions::winapi::dl","io","kernel","object","string","stringio","highline::systemextensions::winapi::getconsolescreenbufferinfo()","highline::systemextensions::winapi::getstdhandle()","highline::string()","highline::style()","highline::colorscheme#[]()","highline::colorscheme#[]=()","highline::systemextensions::winapi::_getch()","highline#actual_length()","highline#agree()","highline::style::ansi_rgb_to_hex()","highline::question#answer_or_default()","highline::question#append_default()","highline#ask()","highline::style#blue()","highline::style#bright()","highline::question#build_responses()","highline::question#change_case()","highline::menu#choice()","highline::menu#choices()","highline#choose()","highline::style#code()","highline::style::code_index()","highline#color()","highline::color()","highline::stringextensions#color()","highline::style#color()","highline#color_code()","highline::color_code()","highline::color_scheme()","highline::color_scheme=()","highline::colorize_strings()","highline::const_missing()","highline#continue_paging?()","highline::question#convert()","highline::style#create_bright_variant()","highline::colorscheme#definition()","highline::style#dup()","highline::simulate#eof?()","highline::question#expected_range()","highline#explain_error()","highline::style#find_style()","highline::question#first_answer()","highline::question#first_answer?()","highline#format_statement()","highline#gather()","highline::systemextensions#get_character()","highline#get_line()","highline#get_response()","highline::simulate#getbyte()","highline::simulate#gets()","highline::style#green()","highline::menu#help()","highline::menu#hidden()","highline::question#in_range?()","highline::colorscheme#include?()","highline::stringextensions::included()","highline#indent()","highline#indentation()","highline::style::index()","highline::menu#index=()","highline::menu#init_help()","highline::systemextensions#initialize_system_extensions()","highline::colorscheme#keys()","highline::menu#layout=()","highline::style#light()","highline#list()","highline::style::list()","highline::colorscheme#load_from_hash()","highline::stringextensions#method_missing()","highline::new()","highline::colorscheme::new()","highline::menu::new()","highline::question::new()","highline::samplecolorscheme::new()","highline::simulate::new()","highline::style::new()","highline#newline()","highline::stringextensions#on()","highline::style#on()","highline::stringextensions#on_rgb()","highline::menu#options()","object#or_ask()","highline#output_cols()","highline#output_rows()","highline#page_at=()","highline#page_print()","highline::systemextensions#raw_no_echo_mode()","highline::style#red()","highline::question#remove_whitespace()","highline::systemextensions#restore_mode()","highline::stringextensions#rgb()","highline::style::rgb()","highline::style::rgb_hex()","highline::style::rgb_number()","highline::style::rgb_parts()","highline#say()","highline::menu#select()","highline::question#selection()","highline::supports_rgb_color?()","highline::systemextensions#terminal_size()","highline::menu#to_ary()","highline::colorscheme#to_constant()","highline::colorscheme#to_hash()","highline::style#to_hash()","highline::menu#to_s()","highline::question#to_s()","highline::colorscheme#to_symbol()","highline::track_eof=()","highline::track_eof?()","highline::uncolor()","highline#uncolor()","highline::stringextensions#uncolor()","highline::style::uncolor()","highline#unique_answers()","highline::menu#update_responses()","highline::use_color=()","highline::use_color?()","highline::using_color_scheme?()","highline::question#valid_answer?()","highline::style#variant()","highline::simulate::with()","highline#wrap()","highline#wrap_at=()","","","","",""],"info":[["HighLine","","HighLine.html","","<p>A HighLine object is a “high-level line oriented” shell over an input and\nan output stream. …\n"],["HighLine::ColorScheme","","HighLine/ColorScheme.html","","<p>ColorScheme objects encapsulate a named set of colors to be used in the\nHighLine.colors() method call. …\n"],["HighLine::HighLine","","HighLine/HighLine.html","",""],["HighLine::HighLine::HighLine","","HighLine/HighLine/HighLine.html","",""],["HighLine::HighLine::HighLine::String","","HighLine/HighLine/HighLine/String.html","",""],["HighLine::Menu","","HighLine/Menu.html","","<p>Menu objects encapsulate all the details of a call to HighLine.choose().\nUsing the accessors and Menu.choice() …\n"],["HighLine::Question","","HighLine/Question.html","","<p>Question objects contain all the details of a single invocation of\nHighLine.ask().  The object is initialized …\n"],["HighLine::Question::NoAutoCompleteMatch","","HighLine/Question/NoAutoCompleteMatch.html","","<p>An internal HighLine error.  User code does not need to trap this.\n"],["HighLine::QuestionError","","HighLine/QuestionError.html","","<p>An internal HighLine error.  User code does not need to trap this.\n"],["HighLine::SampleColorScheme","","HighLine/SampleColorScheme.html","","<p>A sample ColorScheme.\n"],["HighLine::Simulate","","HighLine/Simulate.html","","<p>Simulates Highline input for use in tests.\n"],["HighLine::StringExtensions","","HighLine/StringExtensions.html","",""],["HighLine::Style","","HighLine/Style.html","",""],["HighLine::SystemExtensions","","HighLine/SystemExtensions.html","",""],["HighLine::SystemExtensions::WinAPI","","HighLine/SystemExtensions/WinAPI.html","",""],["HighLine::SystemExtensions::WinAPI::DL","","HighLine/SystemExtensions/WinAPI/DL.html","",""],["IO","","IO.html","",""],["Kernel","","Kernel.html","","<p><code>require &quot;highline/import&quot;</code> adds shortcut methods to\nKernel, making agree(), ask(), choose() …\n"],["Object","","Object.html","",""],["String","","String.html","","<p>Not a perfect translation, but sufficient for our needs.\n"],["StringIO","","StringIO.html","",""],["GetConsoleScreenBufferInfo","HighLine::SystemExtensions::WinAPI","HighLine/SystemExtensions/WinAPI.html#method-c-GetConsoleScreenBufferInfo","(cons_handle, lp_buffer)",""],["GetStdHandle","HighLine::SystemExtensions::WinAPI","HighLine/SystemExtensions/WinAPI.html#method-c-GetStdHandle","(handle_type)",""],["String","HighLine","HighLine.html#method-c-String","(s)",""],["Style","HighLine","HighLine.html#method-c-Style","(*args)",""],["[]","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-5B-5D","( color_tag )","<p>Allow the scheme to be accessed like a Hash.\n"],["[]=","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-5B-5D-3D","( color_tag, constants )","<p>Allow the scheme to be set like a Hash.\n"],["_getch","HighLine::SystemExtensions::WinAPI","HighLine/SystemExtensions/WinAPI.html#method-c-_getch","()",""],["actual_length","HighLine","HighLine.html#method-i-actual_length","( string_with_escapes )","<p>Returns the length of the passed <code>string_with_escapes</code>, minus\nand color sequence escapes.\n"],["agree","HighLine","HighLine.html#method-i-agree","( yes_or_no_question, character = nil )","<p>A shortcut to HighLine.ask() a question that only accepts “yes” or “no”\nanswers (“y” …\n"],["ansi_rgb_to_hex","HighLine::Style","HighLine/Style.html#method-c-ansi_rgb_to_hex","(ansi_number)",""],["answer_or_default","HighLine::Question","HighLine/Question.html#method-i-answer_or_default","( answer_string )","<p>Returns the provided <em>answer_string</em> or the default answer for this\nQuestion if a default was set and the …\n"],["append_default","HighLine::Question","HighLine/Question.html#method-i-append_default","( )","<p>Adds the default choice to the end of question between <code>|...|</code>.\nTrailing whitespace is preserved so the …\n"],["ask","HighLine","HighLine.html#method-i-ask","( question, answer_type = nil )","<p>This method is the primary interface for user input.  Just provide a\n<em>question</em> to ask the user, the <em>answer_type</em> …\n"],["blue","HighLine::Style","HighLine/Style.html#method-i-blue","()",""],["bright","HighLine::Style","HighLine/Style.html#method-i-bright","()",""],["build_responses","HighLine::Question","HighLine/Question.html#method-i-build_responses","(message_source = answer_type, new_hash_wins = false)","<p>Called late in the initialization process to build intelligent responses\nbased on the details of this …\n"],["change_case","HighLine::Question","HighLine/Question.html#method-i-change_case","( answer_string )","<p>Returns the provided <em>answer_string</em> after changing character case\nby the rules of this Question.  Valid …\n"],["choice","HighLine::Menu","HighLine/Menu.html#method-i-choice","( name, help = nil, &action )","<p>Adds <em>name</em> to the list of available menu items.  Menu items will be\ndisplayed in the order they are added. …\n"],["choices","HighLine::Menu","HighLine/Menu.html#method-i-choices","( *names, &action )","<p>A shortcut for multiple calls to the sister method choice().  <strong>Be\nwarned:</strong>  An <em>action</em> set here will apply …\n"],["choose","HighLine","HighLine.html#method-i-choose","( *items, &details )","<p>This method is HighLine&#39;s menu handler.  For simple usage, you can just\npass all the menu items you …\n"],["code","HighLine::Style","HighLine/Style.html#method-i-code","()",""],["code_index","HighLine::Style","HighLine/Style.html#method-c-code_index","()",""],["color","HighLine","HighLine.html#method-i-color","(*args)","<p>Works as an instance method, same as the class method\n"],["color","HighLine","HighLine.html#method-c-color","( string, *colors )","<p>This method provides easy access to ANSI color sequences, without the user\nneeding to remember to CLEAR …\n"],["color","HighLine::StringExtensions","HighLine/StringExtensions.html#method-i-color","(*args)",""],["color","HighLine::Style","HighLine/Style.html#method-i-color","(string)",""],["color_code","HighLine","HighLine.html#method-i-color_code","(*colors)","<p>Works as an instance method, same as the class method\n"],["color_code","HighLine","HighLine.html#method-c-color_code","(*colors)","<p>In case you just want the color code, without the embedding and the CLEAR\n"],["color_scheme","HighLine","HighLine.html#method-c-color_scheme","()","<p>Returns the current color scheme.\n"],["color_scheme=","HighLine","HighLine.html#method-c-color_scheme-3D","( setting )","<p>Pass ColorScheme to <em>setting</em> to set a HighLine color scheme.\n"],["colorize_strings","HighLine","HighLine.html#method-c-colorize_strings","()",""],["const_missing","HighLine","HighLine.html#method-c-const_missing","(name)","<p>For RGB colors:\n"],["continue_paging?","HighLine","HighLine.html#method-i-continue_paging-3F","()","<p>Ask user if they wish to continue paging output. Allows them to type “q” to\ncancel the paging …\n"],["convert","HighLine::Question","HighLine/Question.html#method-i-convert","( answer_string )","<p>Transforms the given <em>answer_string</em> into the expected type for this\nQuestion.  Currently supported conversions …\n"],["create_bright_variant","HighLine::Style","HighLine/Style.html#method-i-create_bright_variant","(variant_name)",""],["definition","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-definition","( color_tag )","<p>Retrieve the original form of the scheme\n"],["dup","HighLine::Style","HighLine/Style.html#method-i-dup","()",""],["eof?","HighLine::Simulate","HighLine/Simulate.html#method-i-eof-3F","()","<p>The simulator handles its own EOF\n"],["expected_range","HighLine::Question","HighLine/Question.html#method-i-expected_range","( )","<p>Returns an English explanation of the current range settings.\n"],["explain_error","HighLine","HighLine.html#method-i-explain_error","( error )","<p>A helper method for sending the output stream and error and repeat of the\nquestion.\n"],["find_style","HighLine::Style","HighLine/Style.html#method-i-find_style","(name)",""],["first_answer","HighLine::Question","HighLine/Question.html#method-i-first_answer","( )","<p>Returns <em>first_answer</em>, which will be unset following this call.\n"],["first_answer?","HighLine::Question","HighLine/Question.html#method-i-first_answer-3F","( )","<p>Returns true if <em>first_answer</em> is set.\n"],["format_statement","HighLine","HighLine.html#method-i-format_statement","(statement)",""],["gather","HighLine","HighLine.html#method-i-gather","( )","<p>Collects an Array/Hash full of answers as described in\nHighLine::Question.gather().\n<p>Raises EOFError if …\n"],["get_character","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-get_character","( input = STDIN )","<p>Windows savvy getc().\n<p><strong>WARNING</strong>:  This method ignores <code>input</code> and reads\none character from <code>STDIN</code>!\n"],["get_line","HighLine","HighLine.html#method-i-get_line","( )","<p>Read a line of input from the input stream and process whitespace as\nrequested by the Question object. …\n"],["get_response","HighLine","HighLine.html#method-i-get_response","( )","<p>Return a line or character of input, as requested for this question.\nCharacter input will be returned …\n"],["getbyte","HighLine::Simulate","HighLine/Simulate.html#method-i-getbyte","()","<p>Simulate StringIO#getbyte by shifting a single character off of the next\nline of the script\n"],["gets","HighLine::Simulate","HighLine/Simulate.html#method-i-gets","()","<p>Simulate StringIO#gets by shifting a string off of the script\n"],["green","HighLine::Style","HighLine/Style.html#method-i-green","()",""],["help","HighLine::Menu","HighLine/Menu.html#method-i-help","( topic, help )","<p>Used to set help for arbitrary topics.  Use the topic\n<code>&quot;help&quot;</code> to override the default message. …\n"],["hidden","HighLine::Menu","HighLine/Menu.html#method-i-hidden","( name, help = nil, &action )","<p>Identical to choice(), but the item will not be listed for the user.\n"],["in_range?","HighLine::Question","HighLine/Question.html#method-i-in_range-3F","( answer_object )","<p>Returns <code>true</code> if the <em>answer_object</em> is greater than the\n<em>above</em> attribute, less than the <em>below</em> attribute …\n"],["include?","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-include-3F","( color_tag )","<p>Does this color scheme include the given tag name?\n"],["included","HighLine::StringExtensions","HighLine/StringExtensions.html#method-c-included","(base)",""],["indent","HighLine","HighLine.html#method-i-indent","(increase=1, statement=nil, multiline=nil)","<p>Executes block or outputs statement with indentation\n"],["indentation","HighLine","HighLine.html#method-i-indentation","()","<p>Outputs indentation with current settings\n"],["index","HighLine::Style","HighLine/Style.html#method-c-index","(style)",""],["index=","HighLine::Menu","HighLine/Menu.html#method-i-index-3D","( style )","<p>Sets the indexing style for this Menu object.  Indexes are appended to menu\nitems, when displayed in …\n"],["init_help","HighLine::Menu","HighLine/Menu.html#method-i-init_help","( )","<p>Initializes the help system by adding a <code>:help</code> choice, some\naction code, and the default help listing. …\n"],["initialize_system_extensions","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-initialize_system_extensions","()",""],["keys","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-keys","()","<p>Retrieve the keys in the scheme\n"],["layout=","HighLine::Menu","HighLine/Menu.html#method-i-layout-3D","( new_layout )","<p>Setting a <em>layout</em> with this method also adjusts some other\nattributes of the Menu object, to ideal defaults …\n"],["light","HighLine::Style","HighLine/Style.html#method-i-light","()",""],["list","HighLine","HighLine.html#method-i-list","( items, mode = :rows, option = nil )","<p>This method is a utility for quickly and easily laying out lists.  It can\nbe accessed within ERb replacements …\n"],["list","HighLine::Style","HighLine/Style.html#method-c-list","()",""],["load_from_hash","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-load_from_hash","( h )","<p>Load multiple colors from key/value pairs.\n"],["method_missing","HighLine::StringExtensions","HighLine/StringExtensions.html#method-i-method_missing","(method, *args, &blk)",""],["new","HighLine","HighLine.html#method-c-new","( input = $stdin, output = $stdout, wrap_at = nil, page_at = nil, indent_size=3, indent_level=0 )","<p>Create an instance of HighLine, connected to the streams <em>input</em> and\n<em>output</em>.\n"],["new","HighLine::ColorScheme","HighLine/ColorScheme.html#method-c-new","( h = nil )","<p>Create an instance of HighLine::ColorScheme. The customization can happen\nas a passed in Hash or via …\n"],["new","HighLine::Menu","HighLine/Menu.html#method-c-new","( )","<p>Create an instance of HighLine::Menu.  All customization is done through\nthe passed block, which should …\n"],["new","HighLine::Question","HighLine/Question.html#method-c-new","( question, answer_type )","<p>Create an instance of HighLine::Question.  Expects a <em>question</em> to\nask (can be <code>&quot;&quot;</code>) and an <em>answer_type</em> …\n"],["new","HighLine::SampleColorScheme","HighLine/SampleColorScheme.html#method-c-new","( h = nil )","<p>Builds the sample scheme with settings for <code>:critical</code>,\n<code>:error</code>, <code>:warning</code>, <code>:notice</code>,\n<code>:info</code>, <code>:debug</code>, <code>:row_even</code> …\n"],["new","HighLine::Simulate","HighLine/Simulate.html#method-c-new","(strings)","<p>Creates a simulator with an array of Strings as a script\n"],["new","HighLine::Style","HighLine/Style.html#method-c-new","(defn = {})","<p>Single color/styles have :name, :code, :rgb (possibly), :builtin Compound\nstyles have :name, :list, :builtin …\n"],["newline","HighLine","HighLine.html#method-i-newline","()","<p>Outputs newline\n"],["on","HighLine::StringExtensions","HighLine/StringExtensions.html#method-i-on","(arg)",""],["on","HighLine::Style","HighLine/Style.html#method-i-on","()",""],["on_rgb","HighLine::StringExtensions","HighLine/StringExtensions.html#method-i-on_rgb","(*colors)",""],["options","HighLine::Menu","HighLine/Menu.html#method-i-options","( )","<p>This method returns all possible options for auto-completion, based on the\nsettings of <em>index</em> and <em>select_by</em> …\n"],["or_ask","Object","Object.html#method-i-or_ask","( *args, &details )","<p>Tries this object as a <em>first_answer</em> for a HighLine::Question.  See\nthat attribute for details.\n<p><strong>Warning</strong> …\n"],["output_cols","HighLine","HighLine.html#method-i-output_cols","()","<p>Returns the number of columns for the console, or a default it they cannot\nbe determined.\n"],["output_rows","HighLine","HighLine.html#method-i-output_rows","()","<p>Returns the number of rows for the console, or a default if they cannot be\ndetermined.\n"],["page_at=","HighLine","HighLine.html#method-i-page_at-3D","( setting )","<p>Set to an integer value to cause HighLine to page output lines over the\nindicated line limit.  When  …\n"],["page_print","HighLine","HighLine.html#method-i-page_print","( output )","<p>Page print a series of at most <em>page_at</em> lines for <em>output</em>. \nAfter each page is printed, HighLine will pause …\n"],["raw_no_echo_mode","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-raw_no_echo_mode","()","<p>We do not define a raw_no_echo_mode for Windows as _getch turns off echo\n"],["red","HighLine::Style","HighLine/Style.html#method-i-red","()",""],["remove_whitespace","HighLine::Question","HighLine/Question.html#method-i-remove_whitespace","( answer_string )","<p>Returns the provided <em>answer_string</em> after processing whitespace by\nthe rules of this Question.  Valid …\n"],["restore_mode","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-restore_mode","()",""],["rgb","HighLine::StringExtensions","HighLine/StringExtensions.html#method-i-rgb","(*colors)",""],["rgb","HighLine::Style","HighLine/Style.html#method-c-rgb","(*colors)",""],["rgb_hex","HighLine::Style","HighLine/Style.html#method-c-rgb_hex","(*colors)",""],["rgb_number","HighLine::Style","HighLine/Style.html#method-c-rgb_number","(*parts)",""],["rgb_parts","HighLine::Style","HighLine/Style.html#method-c-rgb_parts","(hex)",""],["say","HighLine","HighLine.html#method-i-say","( statement )","<p>The basic output method for HighLine objects.  If the provided\n<em>statement</em> ends with a space or tab character, …\n"],["select","HighLine::Menu","HighLine/Menu.html#method-i-select","( highline_context, selection, details = nil )","<p>This method processes the auto-completed user selection, based on the rules\nfor this Menu object.  If …\n"],["selection","HighLine::Question","HighLine/Question.html#method-i-selection","( )","<p>Returns an Array of valid answers to this question.  These answers are only\nknown when <em>answer_type</em> is …\n"],["supports_rgb_color?","HighLine","HighLine.html#method-c-supports_rgb_color-3F","()","<p>For checking if the current version of HighLine supports RGB colors Usage:\nHighLine.supports_rgb_color? …\n"],["terminal_size","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-terminal_size","()","<p>A Windows savvy method to fetch the console columns, and rows.\n"],["to_ary","HighLine::Menu","HighLine/Menu.html#method-i-to_ary","( )","<p>Allows Menu objects to pass as Arrays, for use with HighLine.list(). This\nmethod returns all menu items …\n"],["to_constant","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-to_constant","( v )","<p>Return a normalized representation of a color setting.\n"],["to_hash","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-to_hash","()","<p>Retrieve the color scheme hash (in original definition format)\n"],["to_hash","HighLine::Style","HighLine/Style.html#method-i-to_hash","()",""],["to_s","HighLine::Menu","HighLine/Menu.html#method-i-to_s","( )","<p>Allows Menu to behave as a String, just like Question.  Returns the\n<em>layout</em> to be rendered, which is used …\n"],["to_s","HighLine::Question","HighLine/Question.html#method-i-to_s","()","<p>Stringifies the question to be asked.\n"],["to_symbol","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-to_symbol","( t )","<p>Return a normalized representation of a color name.\n"],["track_eof=","HighLine","HighLine.html#method-c-track_eof-3D","( setting )","<p>Pass <code>false</code> to <em>setting</em> to turn off HighLine&#39;s EOF\ntracking.\n"],["track_eof?","HighLine","HighLine.html#method-c-track_eof-3F","()","<p>Returns true if HighLine is currently tracking EOF for input.\n"],["uncolor","HighLine","HighLine.html#method-c-uncolor","(string)","<p>Remove color codes from a string\n"],["uncolor","HighLine","HighLine.html#method-i-uncolor","(string)","<p>Works as an instance method, same as the class method\n"],["uncolor","HighLine::StringExtensions","HighLine/StringExtensions.html#method-i-uncolor","()",""],["uncolor","HighLine::Style","HighLine/Style.html#method-c-uncolor","(string)",""],["unique_answers","HighLine","HighLine.html#method-i-unique_answers","(list = @answers)","<p>A helper method used by HighLine::Question.verify_match for finding whether\na list of answers match or …\n"],["update_responses","HighLine::Menu","HighLine/Menu.html#method-i-update_responses","( )","<p>This method will update the intelligent responses to account for Menu\nspecific differences.  Calls the …\n"],["use_color=","HighLine","HighLine.html#method-c-use_color-3D","( setting )","<p>Pass <code>false</code> to <em>setting</em> to turn off HighLine&#39;s\ncolor escapes.\n"],["use_color?","HighLine","HighLine.html#method-c-use_color-3F","()","<p>Returns true if HighLine is currently using color escapes.\n"],["using_color_scheme?","HighLine","HighLine.html#method-c-using_color_scheme-3F","()","<p>Returns <code>true</code> if HighLine is currently using a color scheme.\n"],["valid_answer?","HighLine::Question","HighLine/Question.html#method-i-valid_answer-3F","( answer_string )","<p>Returns <code>true</code> if the provided <em>answer_string</em> is\naccepted by the <em>validate</em> attribute or <code>false</code> if\nit&#39;s …\n"],["variant","HighLine::Style","HighLine/Style.html#method-i-variant","(new_name, options={})",""],["with","HighLine::Simulate","HighLine/Simulate.html#method-c-with","(*strings)","<p>A wrapper method that temporarily replaces the Highline instance in\n$terminal with an instance of this …\n"],["wrap","HighLine","HighLine.html#method-i-wrap","( text )","<p>Wrap a sequence of <em>lines</em> at <em>wrap_at</em> characters per line. \nExisting newlines will not be affected by this …\n"],["wrap_at=","HighLine","HighLine.html#method-i-wrap_at-3D","( setting )","<p>Set to an integer value to cause HighLine to wrap output lines at the\nindicated character limit.  When …\n"],["Changelog","","Changelog_md.html","","<p>Change Log\n<p>Below is a complete listing of changes for each revision of HighLine.\n<p>1.7.8 / 2015-10-09\n"],["INSTALL","","INSTALL.html","","<p>Installing HighLine\n<p>RubyGems is the preferred easy install method for HighLine.  However, you\ncan install …\n"],["LICENSE","","LICENSE.html","","<p>License Terms\n<p>Distributed under the user&#39;s choice of the GPL Version 2 (see COPYING\nfor details) or …\n"],["README","","README_rdoc.html","","<p>HighLine\n<p>by James Edward Gray II\n<p><img src=“https://travis-ci.org/JEG2/highline.svg” alt=“Build Status” …\n"],["TODO","","TODO.html","","<p>To Do List\n<p>The following is a list of planned expansions for HighLine, in no\nparticular order.\n<p>Rent this …\n"]]}}